name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'phase-*', 'github-actions-*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Pylint
      continue-on-error: true
      run: |
        echo "::warning::Running Pylint - Issues will not fail the build"
        mkdir -p reports
        pylint $(git ls-files '*.py') --output-format=json > reports/pylint-report.json || true
        pylint $(git ls-files '*.py') --output-format=text > reports/pylint-report.txt || true
        pylint $(git ls-files '*.py') || echo "Pylint found issues (warnings only)"

    - name: Run Black (format check)
      continue-on-error: true
      run: |
        echo "::warning::Running Black - Issues will not fail the build"
        mkdir -p reports
        black --check --diff . > reports/black-report.txt 2>&1 || echo "Black found formatting issues (warnings only)"

    - name: Run MyPy (type check)
      continue-on-error: true
      run: |
        echo "::warning::Running MyPy - Issues will not fail the build"
        mkdir -p reports
        mypy . --install-types --non-interactive --txt-report reports --html-report reports/mypy-html || echo "MyPy found type issues (warnings only)"

    - name: Generate Code Quality Summary
      if: always()
      run: |
        echo "# Code Quality Report - Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Pylint Summary
        if [ -f reports/pylint-report.txt ]; then
          echo "## üìã Pylint Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 reports/pylint-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Black Summary
        if [ -f reports/black-report.txt ]; then
          FILE_COUNT=$(grep -c "would reformat" reports/black-report.txt || echo "0")
          echo "## üé® Black Formatting" >> $GITHUB_STEP_SUMMARY
          echo "Files needing reformatting: **$FILE_COUNT**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # MyPy Summary
        echo "## üîç MyPy Type Checking" >> $GITHUB_STEP_SUMMARY
        echo "See artifacts for detailed report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Upload Code Quality Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports-${{ matrix.python-version }}
        path: reports/
        if-no-files-found: warn

    - name: Post PR Comment with Code Quality Report
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Read reports
          let pylintScore = 'N/A';
          let pylintIssues = 0;
          let blackFiles = 0;
          let pylintSummary = '';

          try {
            const pylintReport = fs.readFileSync('reports/pylint-report.txt', 'utf8');
            const scoreMatch = pylintReport.match(/Your code has been rated at ([\d.]+)\/10/);
            if (scoreMatch) pylintScore = scoreMatch[1];

            // Count specific issue types
            const unusedImports = (pylintReport.match(/unused-import/g) || []).length;
            const unusedVars = (pylintReport.match(/unused-variable/g) || []).length;
            const unusedArgs = (pylintReport.match(/unused-argument/g) || []).length;
            const fStrings = (pylintReport.match(/f-string-without-interpolation/g) || []).length;
            const importOrder = (pylintReport.match(/wrong-import-order/g) || []).length;

            pylintSummary = `
          **Issue Breakdown:**
          - üì¶ Unused imports: ${unusedImports}
          - üîß Unused variables: ${unusedVars}
          - ‚öôÔ∏è Unused arguments: ${unusedArgs}
          - üî§ F-strings without interpolation: ${fStrings}
          - üìã Import order issues: ${importOrder}
          `;
          } catch (e) {
            console.log('Could not read pylint report');
          }

          try {
            const blackReport = fs.readFileSync('reports/black-report.txt', 'utf8');
            const matches = blackReport.match(/would reformat/g);
            blackFiles = matches ? matches.length : 0;
          } catch (e) {
            console.log('Could not read black report');
          }

          // Determine emoji based on score
          let scoreEmoji = '‚úÖ';
          if (pylintScore !== 'N/A') {
            const score = parseFloat(pylintScore);
            if (score < 7) scoreEmoji = '‚ùå';
            else if (score < 8.5) scoreEmoji = '‚ö†Ô∏è';
          }

          // Create comment body
          const commentBody = `## ü§ñ Code Quality Report

          **Python Version:** 3.11 (latest)

          ### üìä Overall Results

          | Tool | Status | Details |
          |------|--------|---------|
          | **Pylint** | ${scoreEmoji} **${pylintScore}/10** | Static code analysis |
          | **Black** | ${blackFiles > 0 ? '‚ö†Ô∏è' : '‚úÖ'} | ${blackFiles} file(s) need formatting |
          | **MyPy** | ‚ÑπÔ∏è | Type checking complete |

          ${pylintScore !== 'N/A' ? pylintSummary : ''}

          ### üì• Detailed Reports

          Download the full reports from the **Artifacts** section of this workflow run to see:
          - \`pylint-report.json\` - Machine-readable format
          - \`pylint-report.txt\` - Full text report
          - \`black-report.txt\` - Formatting suggestions
          - \`mypy-html/\` - Interactive type checking report

          ### üí° Quick Fixes

          ${blackFiles > 0 ? '**Format your code:**\n```bash\nblack .\n```\n' : ''}
          ${pylintScore !== 'N/A' && parseFloat(pylintScore) < 9 ? '**View detailed issues:**\nDownload the pylint report artifact for line-by-line suggestions.\n' : ''}

          ---

          <sub>üìå This comment updates automatically on each push. Current build: ${context.sha.substring(0, 7)}</sub>
          `;

          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('ü§ñ Code Quality Report')
          );

          // Update or create comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create .env file for tests
      run: |
        echo "ALPHA_VANTAGE_API_KEY=test_api_key_for_ci" > .env

    - name: Run pytest with coverage
      run: |
        # Check if tests directory exists and has test files
        if [ -d "tests" ] && [ -n "$(find tests -name 'test_*.py' -o -name '*_test.py' 2>/dev/null)" ]; then
          echo "Running tests with coverage enforcement..."
          pytest --cov=src --cov=main --cov-report=term --cov-report=html --cov-report=xml -v
        else
          echo "::warning::No tests found - skipping test execution"
          echo "Tests will be enforced once test files are added to the tests/ directory"
          # Create empty coverage files so upload doesn't fail
          mkdir -p htmlcov
          echo "No tests available yet" > htmlcov/index.html
          exit 0
        fi

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        if-no-files-found: warn

    - name: Coverage comment (PR only)
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "::error::Tests failed - build cannot proceed"
          exit 1
        fi

        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "::warning::Code quality checks have warnings, but build continues"
        fi

        echo "::notice::Build completed successfully!"
