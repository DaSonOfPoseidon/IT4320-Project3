name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'phase-*', 'github-actions-*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Pylint
      continue-on-error: true
      run: |
        echo "::warning::Running Pylint - Issues will not fail the build"
        pylint $(git ls-files '*.py') || echo "Pylint found issues (warnings only)"

    - name: Run Black (format check)
      continue-on-error: true
      run: |
        echo "::warning::Running Black - Issues will not fail the build"
        black --check --diff . || echo "Black found formatting issues (warnings only)"

    - name: Run MyPy (type check)
      continue-on-error: true
      run: |
        echo "::warning::Running MyPy - Issues will not fail the build"
        mypy . --install-types --non-interactive || echo "MyPy found type issues (warnings only)"

  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create .env file for tests
      run: |
        echo "ALPHA_VANTAGE_API_KEY=test_api_key_for_ci" > .env

    - name: Run pytest with coverage
      run: |
        pytest --cov=. --cov-report=term --cov-report=html --cov-report=xml -v

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

    - name: Coverage comment (PR only)
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "::error::Tests failed - build cannot proceed"
          exit 1
        fi

        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "::warning::Code quality checks have warnings, but build continues"
        fi

        echo "::notice::Build completed successfully!"
